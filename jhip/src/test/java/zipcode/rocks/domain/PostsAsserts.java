package zipcode.rocks.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PostsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostsAllPropertiesEquals(Posts expected, Posts actual) {
        assertPostsAutoGeneratedPropertiesEquals(expected, actual);
        assertPostsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostsAllUpdatablePropertiesEquals(Posts expected, Posts actual) {
        assertPostsUpdatableFieldsEquals(expected, actual);
        assertPostsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostsAutoGeneratedPropertiesEquals(Posts expected, Posts actual) {
        assertThat(expected)
            .as("Verify Posts auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostsUpdatableFieldsEquals(Posts expected, Posts actual) {
        assertThat(expected)
            .as("Verify Posts relevant properties")
            .satisfies(e -> assertThat(e.getPrice()).as("check price").isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getAvailability()).as("check availability").isEqualTo(actual.getAvailability()))
            .satisfies(e -> assertThat(e.getTag()).as("check tag").isEqualTo(actual.getTag()))
            .satisfies(e -> assertThat(e.getImage()).as("check image").isEqualTo(actual.getImage()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostsUpdatableRelationshipsEquals(Posts expected, Posts actual) {}
}
